// Generated by rstantools.  Do not edit by hand.

/*
    leafcutter is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    leafcutter is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with leafcutter.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_dm_glm_robust_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dm_glm_robust");
    reader.add_event(54, 52, "end", "model_dm_glm_robust");
    return reader;
}

#include <stan_meta_header.hpp>
 class model_dm_glm_robust : public prob_grad {
private:
        int N;
        int P;
        int K;
        std::vector<vector_d> x;
        std::vector<vector_d> y;
        double concShape;
        double concRate;
        double outlier_prior_a;
        double outlier_prior_b;
public:
    model_dm_glm_robust(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_dm_glm_robust(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_dm_glm_robust_namespace::model_dm_glm_robust";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);

            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 0);

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);

            current_statement_begin__ = 5;
            validate_non_negative_index("x", "P", P);
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N,P));
            x = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(P));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_1_max__ = P;
            size_t x_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    x[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 6;
            validate_non_negative_index("y", "K", K);
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N,K));
            y = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = K;
            size_t y_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    y[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "concShape", "double", context__.to_vec());
            concShape = double(0);
            vals_r__ = context__.vals_r("concShape");
            pos__ = 0;
            concShape = vals_r__[pos__++];
            check_greater_or_equal(function__, "concShape", concShape, 0);

            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "concRate", "double", context__.to_vec());
            concRate = double(0);
            vals_r__ = context__.vals_r("concRate");
            pos__ = 0;
            concRate = vals_r__[pos__++];
            check_greater_or_equal(function__, "concRate", concRate, 0);

            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "outlier_prior_a", "double", context__.to_vec());
            outlier_prior_a = double(0);
            vals_r__ = context__.vals_r("outlier_prior_a");
            pos__ = 0;
            outlier_prior_a = vals_r__[pos__++];
            check_greater_or_equal(function__, "outlier_prior_a", outlier_prior_a, 0);

            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "outlier_prior_b", "double", context__.to_vec());
            outlier_prior_b = double(0);
            vals_r__ = context__.vals_r("outlier_prior_b");
            pos__ = 0;
            outlier_prior_b = vals_r__[pos__++];
            check_greater_or_equal(function__, "outlier_prior_b", outlier_prior_b, 0);


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 13;
            validate_non_negative_index("beta_raw", "K", K);
            validate_non_negative_index("beta_raw", "P", P);
            num_params_r__ += ((K - 1) * P);
            current_statement_begin__ = 14;
            validate_non_negative_index("beta_scale", "P", P);
            num_params_r__ += (1 * P);
            current_statement_begin__ = 15;
            validate_non_negative_index("conc", "K", K);
            num_params_r__ += (1 * K);
            current_statement_begin__ = 16;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_dm_glm_robust() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 13;
        if (!(context__.contains_r("beta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_raw");
        pos__ = 0U;
        validate_non_negative_index("beta_raw", "K", K);
        validate_non_negative_index("beta_raw", "P", P);
        context__.validate_dims("parameter initialization", "beta_raw", "vector_d", context__.to_vec(P,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta_raw(P, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t beta_raw_j_1_max__ = K;
        size_t beta_raw_k_0_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
                beta_raw[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t beta_raw_i_0_max__ = P;
        for (size_t i_0__ = 0; i_0__ < beta_raw_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(beta_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 14;
        if (!(context__.contains_r("beta_scale")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_scale missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_scale");
        pos__ = 0U;
        validate_non_negative_index("beta_scale", "P", P);
        context__.validate_dims("parameter initialization", "beta_scale", "double", context__.to_vec(P));
        std::vector<double> beta_scale(P, double(0));
        size_t beta_scale_k_0_max__ = P;
        for (size_t k_0__ = 0; k_0__ < beta_scale_k_0_max__; ++k_0__) {
            beta_scale[k_0__] = vals_r__[pos__++];
        }
        size_t beta_scale_i_0_max__ = P;
        for (size_t i_0__ = 0; i_0__ < beta_scale_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(beta_scale[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_scale: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 15;
        if (!(context__.contains_r("conc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable conc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("conc");
        pos__ = 0U;
        validate_non_negative_index("conc", "K", K);
        context__.validate_dims("parameter initialization", "conc", "double", context__.to_vec(K));
        std::vector<double> conc(K, double(0));
        size_t conc_k_0_max__ = K;
        for (size_t k_0__ = 0; k_0__ < conc_k_0_max__; ++k_0__) {
            conc[k_0__] = vals_r__[pos__++];
        }
        size_t conc_i_0_max__ = K;
        for (size_t i_0__ = 0; i_0__ < conc_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, conc[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable conc: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 16;
        if (!(context__.contains_r("outlier_prob")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable outlier_prob missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("outlier_prob");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "outlier_prob", "double", context__.to_vec());
        double outlier_prob(0);
        outlier_prob = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, outlier_prob);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable outlier_prob: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 13;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > beta_raw;
            size_t beta_raw_d_0_max__ = P;
            beta_raw.reserve(beta_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_raw.push_back(in__.simplex_constrain(K, lp__));
                else
                    beta_raw.push_back(in__.simplex_constrain(K));
            }

            current_statement_begin__ = 14;
            std::vector<local_scalar_t__> beta_scale;
            size_t beta_scale_d_0_max__ = P;
            beta_scale.reserve(beta_scale_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_scale_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_scale.push_back(in__.scalar_constrain(lp__));
                else
                    beta_scale.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 15;
            std::vector<local_scalar_t__> conc;
            size_t conc_d_0_max__ = K;
            conc.reserve(conc_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < conc_d_0_max__; ++d_0__) {
                if (jacobian__)
                    conc.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    conc.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 16;
            local_scalar_t__ outlier_prob;
            (void) outlier_prob;  // dummy to suppress unused var warning
            if (jacobian__)
                outlier_prob = in__.scalar_lub_constrain(0, 1, lp__);
            else
                outlier_prob = in__.scalar_lub_constrain(0, 1);

            // model body
            {
            current_statement_begin__ = 21;
            validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "P", P);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta(K, P);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);


            current_statement_begin__ = 22;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 23;
                for (int p = 1; p <= P; ++p) {
                    current_statement_begin__ = 24;
                    stan::model::assign(beta, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list())), 
                                (get_base1(beta_scale, p, "beta_scale", 1) * (get_base1(get_base1(beta_raw, p, "beta_raw", 1), k, "beta_raw", 2) - (1.0 / K))), 
                                "assigning variable beta");
                }
            }
            current_statement_begin__ = 26;
            lp_accum__.add(beta_log<propto__>(outlier_prob, outlier_prior_a, outlier_prior_b));
            current_statement_begin__ = 28;
            lp_accum__.add(gamma_log<propto__>(conc, concShape, concRate));
            current_statement_begin__ = 29;
            for (int n = 1; n <= N; ++n) {
                {
                current_statement_begin__ = 30;
                validate_non_negative_index("a", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a(K);
                stan::math::initialize(a, DUMMY_VAR__);
                stan::math::fill(a, DUMMY_VAR__);

                current_statement_begin__ = 31;
                local_scalar_t__ suma(DUMMY_VAR__);
                (void) suma;  // dummy to suppress unused var warning
                stan::math::initialize(suma, DUMMY_VAR__);
                stan::math::fill(suma, DUMMY_VAR__);

                current_statement_begin__ = 32;
                local_scalar_t__ sumy(DUMMY_VAR__);
                (void) sumy;  // dummy to suppress unused var warning
                stan::math::initialize(sumy, DUMMY_VAR__);
                stan::math::fill(sumy, DUMMY_VAR__);

                current_statement_begin__ = 33;
                validate_non_negative_index("aPlusY", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> aPlusY(K);
                stan::math::initialize(aPlusY, DUMMY_VAR__);
                stan::math::fill(aPlusY, DUMMY_VAR__);

                current_statement_begin__ = 34;
                validate_non_negative_index("lGaPlusY", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lGaPlusY(K);
                stan::math::initialize(lGaPlusY, DUMMY_VAR__);
                stan::math::fill(lGaPlusY, DUMMY_VAR__);

                current_statement_begin__ = 35;
                validate_non_negative_index("lG1PlusY", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lG1PlusY(K);
                stan::math::initialize(lG1PlusY, DUMMY_VAR__);
                stan::math::fill(lG1PlusY, DUMMY_VAR__);

                current_statement_begin__ = 36;
                validate_non_negative_index("lGaA", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lGaA(K);
                stan::math::initialize(lGaA, DUMMY_VAR__);
                stan::math::fill(lGaA, DUMMY_VAR__);

                current_statement_begin__ = 37;
                validate_non_negative_index("s", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s(K);
                stan::math::initialize(s, DUMMY_VAR__);
                stan::math::fill(s, DUMMY_VAR__);


                current_statement_begin__ = 38;
                stan::math::assign(s, softmax(multiply(beta, get_base1(x, n, "x", 1))));
                current_statement_begin__ = 39;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 40;
                    stan::model::assign(a, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                (get_base1(conc, k, "conc", 1) * get_base1(s, k, "s", 1)), 
                                "assigning variable a");
                }
                current_statement_begin__ = 43;
                stan::math::assign(suma, sum(a));
                current_statement_begin__ = 44;
                stan::math::assign(sumy, sum(get_base1(y, n, "y", 1)));
                current_statement_begin__ = 45;
                for (int k = 1; k <= K; ++k) {

                    current_statement_begin__ = 46;
                    stan::model::assign(lGaPlusY, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                stan::math::lgamma((get_base1(a, k, "a", 1) + get_base1(get_base1(y, n, "y", 1), k, "y", 2))), 
                                "assigning variable lGaPlusY");
                    current_statement_begin__ = 47;
                    stan::model::assign(lGaA, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                stan::math::lgamma(get_base1(a, k, "a", 1)), 
                                "assigning variable lGaA");
                    current_statement_begin__ = 48;
                    stan::model::assign(lG1PlusY, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                stan::math::lgamma((1.0 + get_base1(get_base1(y, n, "y", 1), k, "y", 2))), 
                                "assigning variable lG1PlusY");
                }
                current_statement_begin__ = 50;
                lp_accum__.add(log_sum_exp(((((stan::math::log((1.0 - outlier_prob)) + stan::math::lgamma(suma)) + sum(lGaPlusY)) - stan::math::lgamma((suma + sumy))) - sum(lGaA)), (((stan::math::log(outlier_prob) + stan::math::lgamma(K)) + sum(lG1PlusY)) - stan::math::lgamma((K + sumy)))));
                }
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_raw");
        names__.push_back("beta_scale");
        names__.push_back("conc");
        names__.push_back("outlier_prob");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dm_glm_robust_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > beta_raw;
        size_t beta_raw_d_0_max__ = P;
        beta_raw.reserve(beta_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_raw_d_0_max__; ++d_0__) {
            beta_raw.push_back(in__.simplex_constrain(K));
        }
        size_t beta_raw_j_1_max__ = K;
        size_t beta_raw_k_0_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
                vars__.push_back(beta_raw[k_0__](j_1__));
            }
        }

        std::vector<double> beta_scale;
        size_t beta_scale_d_0_max__ = P;
        beta_scale.reserve(beta_scale_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_scale_d_0_max__; ++d_0__) {
            beta_scale.push_back(in__.scalar_constrain());
        }
        size_t beta_scale_k_0_max__ = P;
        for (size_t k_0__ = 0; k_0__ < beta_scale_k_0_max__; ++k_0__) {
            vars__.push_back(beta_scale[k_0__]);
        }

        std::vector<double> conc;
        size_t conc_d_0_max__ = K;
        conc.reserve(conc_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < conc_d_0_max__; ++d_0__) {
            conc.push_back(in__.scalar_lb_constrain(0));
        }
        size_t conc_k_0_max__ = K;
        for (size_t k_0__ = 0; k_0__ < conc_k_0_max__; ++k_0__) {
            vars__.push_back(conc[k_0__]);
        }

        double outlier_prob = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(outlier_prob);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_dm_glm_robust";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_raw_j_1_max__ = K;
        size_t beta_raw_k_0_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_scale_k_0_max__ = P;
        for (size_t k_0__ = 0; k_0__ < beta_scale_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_scale" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t conc_k_0_max__ = K;
        for (size_t k_0__ = 0; k_0__ < conc_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "conc" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "outlier_prob";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_raw_j_1_max__ = (K - 1);
        size_t beta_raw_k_0_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_scale_k_0_max__ = P;
        for (size_t k_0__ = 0; k_0__ < beta_scale_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_scale" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t conc_k_0_max__ = K;
        for (size_t k_0__ = 0; k_0__ < conc_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "conc" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "outlier_prob";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_dm_glm_robust_namespace::model_dm_glm_robust stan_model;


#endif
